generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int              @id @default(autoincrement())
  activo          Boolean          @default(false)
  email           String?          @unique
  name            String?
  image           String?
  emailVerified   DateTime?
  tipoUsuario     TipoUsuario      @default(PROPIETARIO)
  accesos         Acceso[]
  accounts        Account[]
  mascotasCreadas Mascota[]        @relation("MascotaCreadaPor")
  perfilesCreados Perfil[]         @relation("PerfilCreadoPor")
  perfil          Perfil?          @relation("UserAPerfil")
  sessions        Session[]
  usuarioClinicas UsuarioClinica[]
}

model Perfil {
  id                     Int                     @id @default(autoincrement())
  prefijo                String?                 @default("Tutor")
  nombre                 String
  clave                  String
  telefonoPrincipal      String                  @unique
  telefonoSecundario1    String?
  telefonoSecundario2    String?
  telefonoVerificado     Boolean                 @default(false)
  documentoId            String?
  activo                 Boolean                 @default(true)
  fechaCreacion          DateTime                @default(now())
  ultimaActividad        DateTime                @updatedAt
  usuarioId              Int?                    @unique
  autorId                Int?
  aplicacionesMedCreadas AplicacionMedicamento[] @relation("CreadorMedicamento")
  aplicacionesMed        AplicacionMedicamento[] @relation("EjecutorMedicamento")
  expedientesCreados     ExpedienteMedico[]      @relation("ExpedienteAutor")
  mascotas               Mascota[]
  notasAnuladas          NotaClinica[]           @relation("NotaAnuladaPor")
  notasClinicasCreadas   NotaClinica[]           @relation("NotaClinicaToPerfil")
  autor                  User?                   @relation("PerfilCreadoPor", fields: [autorId], references: [id])
  usuario                User?                   @relation("UserAPerfil", fields: [usuarioId], references: [id])
  SolicitudLaboratorial  SolicitudLaboratorial[]
}

model Mascota {
  id              Int                @id @default(autoincrement())
  nombre          String
  especie         Especie
  sexo            Sexo
  esterilizado    Esterilizacion
  color           String?
  se√±as          String?
  fechaNacimiento DateTime?
  microchip       String?            @unique
  alergias        String?
  imagen          String?
  activo          Boolean            @default(true)
  fechaCreacion   DateTime           @default(now())
  ultimaActividad DateTime           @updatedAt
  razaId          Int?
  perfilId        Int
  autorId         Int?
  expedientes     ExpedienteMedico[]
  autor           User?              @relation("MascotaCreadaPor", fields: [autorId], references: [id])
  perfil          Perfil             @relation(fields: [perfilId], references: [id])
  raza            Raza?              @relation(fields: [razaId], references: [id])
}

model ExpedienteMedico {
  id                Int              @id @default(autoincrement())
  nombre            String?
  estado            EstadoExpediente
  fechaAlta         DateTime?
  mascotaId         Int
  autorId           Int
  clinicaId         Int?
  tipo              TipoExpediente
  contenidoAdaptado String?
  notasGenerales    String?
  visibleParaTutor  Boolean          @default(false)
  borrado           Boolean          @default(false)
  fechaCreacion     DateTime         @default(now())
  ultimaActividad   DateTime         @updatedAt
  autor             Perfil           @relation("ExpedienteAutor", fields: [autorId], references: [id])
  clinica           Clinica?         @relation(fields: [clinicaId], references: [id])
  mascota           Mascota          @relation(fields: [mascotaId], references: [id])
  notasClinicas     NotaClinica[]

  @@index([mascotaId])
  @@index([estado])
  @@index([mascotaId, estado, ultimaActividad])
}

model NotaClinica {
  id                        Int                     @id @default(autoincrement())
  expedienteId              Int
  historiaClinica           String?
  exploracionFisica         String?
  temperatura               Float?
  peso                      Float?
  frecuenciaCardiaca        Int?
  frecuenciaRespiratoria    Int?
  diagnosticoPresuntivo     String?
  pronostico                String?
  extras                    String?
  archivos                  String?
  fechaCreacion             DateTime                @default(now())
  autorId                   Int
  fechaCancelacion          DateTime?
  anuladaPorId              Int?
  estado                    EstadoNotaClinica       @default(EN_REVISION)
  aplicacionesMed           AplicacionMedicamento[] @relation("AplicacionesMedNota")
  indicaciones              Indicacion[]
  medicamentos              Medicamento[]
  anuladaPor                Perfil?                 @relation("NotaAnuladaPor", fields: [anuladaPorId], references: [id])
  autor                     Perfil                  @relation("NotaClinicaToPerfil", fields: [autorId], references: [id])
  expediente                ExpedienteMedico        @relation(fields: [expedienteId], references: [id])
  solicitudesLaboratoriales SolicitudLaboratorial[]
}

model Medicamento {
  id               Int                     @id @default(autoincrement())
  notaClinicaId    Int
  nombre           String
  dosis            String
  via              ViaMedicamento
  frecuenciaHoras  Int?
  veces            Int?
  desde            DateTime?
  tiempoIndefinido Boolean                 @default(false)
  paraCasa         Boolean                 @default(false)
  fechaCreacion    DateTime                @default(now())
  observaciones    String?
  aplicaciones     AplicacionMedicamento[]
  notaClinica      NotaClinica             @relation(fields: [notaClinicaId], references: [id])
}

model AplicacionMedicamento {
  id                      Int              @id @default(autoincrement())
  notaClinicaId           Int
  medicamentoId           Int?
  nombreMedicamentoManual String?
  via                     ViaMedicamento
  fechaProgramada         DateTime
  fechaReal               DateTime?
  dosis                   String?
  ejecutorId              Int?
  creadorId               Int
  observaciones           String?
  estado                  EstadoAplicacion @default(PENDIENTE)
  fechaCreacion           DateTime         @default(now())
  creador                 Perfil           @relation("CreadorMedicamento", fields: [creadorId], references: [id])
  ejecutor                Perfil?          @relation("EjecutorMedicamento", fields: [ejecutorId], references: [id])
  medicamento             Medicamento?     @relation(fields: [medicamentoId], references: [id])
  notaClinica             NotaClinica      @relation("AplicacionesMedNota", fields: [notaClinicaId], references: [id])

  @@index([notaClinicaId, estado, fechaProgramada])
}

model Indicacion {
  id            Int         @id @default(autoincrement())
  notaClinicaId Int
  descripcion   String
  fechaCreacion DateTime    @default(now())
  notaClinica   NotaClinica @relation(fields: [notaClinicaId], references: [id])
}

model Raza {
  id       Int       @id @default(autoincrement())
  nombre   String
  especie  Especie
  mascotas Mascota[]

  @@unique([nombre, especie])
}

model Clinica {
  id              Int                @id @default(autoincrement())
  nombre          String
  direccion       String
  telefono        String
  tipo            TipoClinica
  fechaCreacion   DateTime           @default(now())
  expedientes     ExpedienteMedico[]
  usuarioClinicas UsuarioClinica[]
}

model UsuarioClinica {
  id        Int     @id @default(autoincrement())
  usuarioId Int
  clinicaId Int
  clinica   Clinica @relation(fields: [clinicaId], references: [id])
  usuario   User    @relation(fields: [usuarioId], references: [id])

  @@unique([usuarioId, clinicaId])
}

model Acceso {
  id         Int        @id @default(autoincrement())
  usuarioId  Int?
  ip         String
  fecha      DateTime   @default(now())
  tipoAcceso TipoAcceso
  detalle    String?
  userAgent  String?
  usuario    User?      @relation(fields: [usuarioId], references: [id])

  @@index([usuarioId, tipoAcceso, fecha])
}

model Account {
  id                Int     @id @default(autoincrement())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model SolicitudLaboratorial {
  id                       Int                    @id @default(autoincrement())
  estudio                  String?               
  proveedor                String
  observacionesClinica     String?                @db.Text
  observacionesLaboratorio String?                @db.Text
  fechaTomaDeMuestra       DateTime
  fechaSolicitud           DateTime               @default(now())
  fechaSubida              DateTime?
  fechaCierre              DateTime?
  estado                   EstadoSolicitudLaboratorial @default(EN_REVISION)
  tokenAcceso              String                 @unique
  creadoPorId              Int

  archivos                 ArchivoLaboratorial[]

  creadoPor                Perfil                 @relation(fields: [creadoPorId], references: [id])
  notaClinicaId Int
  notaClinica              NotaClinica            @relation(fields: [notaClinicaId], references: [id])

  @@index([creadoPorId])
  @@index([notaClinicaId])
}

enum EstadoSolicitudLaboratorial {
  EN_REVISION
  FIRMADA
  FINALIZADA
  ANULADA
}

model ArchivoLaboratorial {
  id          Int                     @id @default(autoincrement())
  solicitudId Int
  url         String
  nombre      String
  tipo        TipoArchivoLaboratorial
  fechaSubida DateTime                @default(now())
  solicitud   SolicitudLaboratorial   @relation(fields: [solicitudId], references: [id])

  @@index([solicitudId])
}

enum TipoArchivoLaboratorial {
  PDF
  PNG
  JPG
  JPEG
}



enum TipoUsuario {
  CEO
  ADMINISTRADOR
  MEDICO
  AUXILIAR
  PROPIETARIO
}

enum TipoAcceso {
  SMS_ENVIO
  SMS_VERIFICACION
  LOGIN
  REGISTRO
  REGISTRO_PERFIL
  SMS_DISPONIBILIDAD
  GET_USUARIO_ACTUAL
}

enum Especie {
  CANINO
  FELINO
  AVE_PSITACIDA
  AVE_OTRA
  OFIDIO
  QUELONIO
  LAGARTIJA
  ROEDOR
  LAGOMORFO
  HURON
  PORCINO
  OTRO
}

enum Sexo {
  MACHO
  HEMBRA
  DESCONOCIDO
}

enum Esterilizacion {
  ESTERILIZADO
  NO_ESTERILIZADO
  DESCONOCIDO
}

enum TipoExpediente {
  CONSULTA
  SEGUIMIENTO
  CIRUGIA
  HOSPITALIZACION
  LABORATORIO
  OTRO
}

enum TipoClinica {
  PRIVADA
  PUBLICA
  MOVIL
  OTRO
}

enum ViaMedicamento {
  ORAL
  SC
  IM
  IV
  OTICA
  OFTALMICA
  TOPICA
  OTRO
}

enum EstadoAplicacion {
  PENDIENTE
  REALIZADA
  OMITIDA
  CANCELADA
}

enum EstadoNotaClinica {
  EN_REVISION
  FINALIZADA
  ANULADA
}

enum EstadoExpediente {
  ACTIVO
  FINALIZADO_MANUAL
  FINALIZADO_AUTO
}


